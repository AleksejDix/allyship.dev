# Extension Development Guidelines

## Build Configuration

### No-Build Approach

- Use vanilla JavaScript instead of TypeScript
- Avoid build tools and transpilation
- Keep the extension lightweight and simple
- Use direct browser-compatible code

### Styling Guidelines

#### Use Tailwind CDN

```html
<!-- Add this in HTML files -->
<script src="https://unpkg.com/@tailwindcss/browser@4"></script>
```

- Use Tailwind utility classes directly in HTML
- Add custom styles using `type="text/tailwindcss"` style tags
- Keep styles scoped to components when possible

Example:

```html
<style type="text/tailwindcss">
  @theme {
    --color-primary: #3b82f6;
    --color-success: #22c55e;
    --color-error: #ef4444;
  }
</style>
```

### JavaScript Guidelines

❌ Avoid:

- TypeScript files and type annotations
- Build tools (webpack, rollup, etc.)
- Complex bundling setups
- Framework dependencies
- NPM package management

✅ Use:

- Vanilla JavaScript (ES6+)
- Native browser modules
- Direct script imports
- Self-contained components
- Browser-compatible code

### File Organization

```
extension/
├── manifest.json      # Extension configuration
├── background.js      # Service worker
├── content.js         # Content script
├── popup.html         # Extension popup
├── popup.js          # Popup logic
├── components/       # Reusable UI components
├── tools/           # Feature-specific tools
├── lib/             # Utility functions
├── styles/          # Global styles
└── icons/           # Extension icons
```

### Component Structure

```javascript
// Example component structure
export class FeatureComponent {
  constructor(container) {
    this.container = container
    this.state = {
      // Component state
    }
  }

  render() {
    return `
      <div class="feature-component">
        <!-- Component HTML -->
      </div>
    `
  }

  mount() {
    // Setup event listeners
  }

  unmount() {
    // Cleanup
  }
}
```

### Error Handling

```javascript
// Consistent error handling pattern
try {
  // Feature logic
} catch (error) {
  console.error({
    feature: "FeatureName",
    error: error.message,
    context: "Additional context",
  })

  // Show user-friendly error message
  this.showError("Something went wrong")
}
```

### Browser APIs

- Use modern browser APIs directly
- Handle browser compatibility gracefully
- Document minimum browser version requirements
- Use feature detection when necessary

Example:

```javascript
if ("permissions" in navigator) {
  // Use permissions API
} else {
  // Fallback behavior
}
```

### Performance Guidelines

1. Minimize DOM operations
2. Use efficient selectors
3. Debounce event handlers
4. Lazy load features when possible
5. Cache expensive computations

### Security Best Practices

1. Sanitize user input
2. Use Content Security Policy
3. Avoid innerHTML when possible
4. Validate data before processing
5. Handle permissions carefully

### Testing Strategy

- Manual testing in different browsers
- Feature verification checklist
- User feedback collection
- Error logging and monitoring
- Regular security audits
