# Additional Project Guidelines

## State Management

### Server State

- Use React Server Components for initial state
- Implement optimistic updates for better UX
- Structure server actions:

```typescript
// Example server action structure
export async function updateScanStatus(scanId: string, status: ScanStatus) {
  try {
    // 1. Validate input
    // 2. Check permissions
    // 3. Perform action
    // 4. Return response
    return {
      success: true,
      data: updatedScan,
    }
  } catch (error) {
    return handleServerError(error)
  }
}
```

### Client State

- Use `useState` for simple component state
- Use `useReducer` for complex component state
- Implement proper loading states
- Handle error states gracefully

## API Response Handling

### Error Handling Utility

```typescript
// features/common/utils/error-handling.ts
export function handleServerError(error: unknown): ServerResponse<never> {
  if (error instanceof ZodError) {
    return {
      success: false,
      error: {
        message: "Validation failed",
        status: 400,
        code: "validation_failed",
        details: error.flatten(),
      },
    }
  }

  if (error instanceof DatabaseError) {
    return {
      success: false,
      error: {
        message: "Database operation failed",
        status: 500,
        code: "database_error",
      },
    }
  }

  // Default error response
  return {
    success: false,
    error: {
      message: "An unexpected error occurred",
      status: 500,
      code: "internal_server_error",
    },
  }
}
```

## Loading States

### Loading Components

```typescript
// features/common/components/loading-states.tsx
export function TableSkeleton() {
  return (
    <div role="status" aria-label="Loading content">
      {/* Skeleton implementation */}
    </div>
  )
}

export function CardSkeleton() {
  return (
    <div role="status" aria-label="Loading content">
      {/* Skeleton implementation */}
    </div>
  )
}
```

## Form Patterns

### Form Structure

```typescript
// features/[feature]/components/form.tsx
export function DataEntryForm() {
  const form = useForm<FormSchema>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      // Default values
    }
  })

  return (
    <form
      onSubmit={form.handleSubmit(onSubmit)}
      aria-label="Data entry form"
      className="space-y-4"
    >
      <div role="alert" aria-live="polite">
        {form.formState.errors.root?.message}
      </div>

      {/* Form fields */}
    </form>
  )
}
```

## Data Fetching Patterns

### Server Component Data Fetching

```typescript
// features/[feature]/components/data-display.tsx
export async function DataDisplay() {
  const data = await fetchData()

  if (!data) {
    return <EmptyState />
  }

  return (
    <div>
      {/* Data display implementation */}
    </div>
  )
}
```

## Accessibility Patterns

### Interactive Components

```typescript
// features/common/components/interactive-element.tsx
export function InteractiveElement({
  label,
  onAction,
  disabled
}: Props) {
  return (
    <button
      onClick={onAction}
      disabled={disabled}
      aria-label={label}
      className={cn(
        "interactive-base",
        disabled && "opacity-50 cursor-not-allowed"
      )}
    >
      {/* Component content */}
    </button>
  )
}
```

### Prefer aria-labelledby over aria-label

❌ Avoid using aria-label:

```typescript
// Don't do this
<button
  aria-label="Close menu"
  onClick={onClose}
>
  <Icon />
</button>
```

✅ Use aria-labelledby instead:

```typescript
// Do this
<button
  aria-labelledby="menu-close-text"
  onClick={onClose}
>
  <span id="menu-close-text" className="sr-only">Close menu</span>
  <Icon aria-hidden="true" />
</button>
```

Rationale:

- aria-label content cannot be translated by browser translation tools
- aria-labelledby references visible text that can be translated
- Maintains accessibility across different languages
- Better support for user language preferences
- More maintainable when supporting multiple languages

Example with dynamic content:

```typescript
<button
  aria-labelledby={`${id}-button-label`}
  onClick={onAction}
>
  <span id={`${id}-button-label`} className="sr-only">
    {`Open ${name}'s profile`}
  </span>
  <Icon aria-hidden="true" />
</button>
```

For links that open in new windows:

```typescript
<a
  href={href}
  target="_blank"
  rel="noopener noreferrer"
  aria-labelledby={`${id}-link-label`}
>
  {children}
  <span id={`${id}-link-label`} className="sr-only">
    {children} (opens in new window)
  </span>
  <ExternalLink aria-hidden="true" size={16} />
</a>
```

## Error Boundaries

### Feature Error Boundary

```typescript
// features/[feature]/components/error-boundary.tsx
export function FeatureErrorBoundary({
  children
}: {
  children: React.ReactNode
}) {
  return (
    <ErrorBoundary
      fallback={
        <div role="alert" className="error-container">
          <h2>Something went wrong</h2>
          <p>Please try again later or contact support if the problem persists.</p>
        </div>
      }
    >
      {children}
    </ErrorBoundary>
  )
}
```

## Monitoring & Logging

### Error Logging

```typescript
// features/common/utils/logging.ts
export function logError(error: unknown, context: Record<string, unknown>) {
  // Log to monitoring service
  console.error({
    timestamp: new Date().toISOString(),
    error: error instanceof Error ? error.message : String(error),
    stack: error instanceof Error ? error.stack : undefined,
    ...context,
  })
}
```

## Performance Optimization

### Image Handling

```typescript
// features/common/components/optimized-image.tsx
export function OptimizedImage({
  src,
  alt,
  width,
  height
}: ImageProps) {
  return (
    <Image
      src={src}
      alt={alt}
      width={width}
      height={height}
      loading="lazy"
      className="object-cover"
      placeholder="blur"
      blurDataURL="data:image/jpeg;base64,..."
    />
  )
}
```

## Security Guidelines

### Input Sanitization

```typescript
// features/common/utils/security.ts
export function sanitizeUserInput(input: string): string {
  // Remove potentially dangerous HTML
  return input.replace(/<[^>]*>?/gm, "")
}

export function validateFileType(file: File, allowedTypes: string[]): boolean {
  return allowedTypes.includes(file.type)
}
```

### Never Use Eval

❌ Avoid using eval for executing code:

```typescript
// Don't do this
const code = bookmarklet.replace("javascript:", "")
eval(code)
```

✅ Use proper function execution instead:

```typescript
// Do this
const executeBookmarklet = new Function(code)
executeBookmarklet()

// Or better, use proper function calls:
function runTool(id: string) {
  switch (id) {
    case "headings":
      checkHeadings()
      break
    // ...
  }
}
```

Rationale:

- eval is unsafe and can execute malicious code
- eval makes code harder to debug
- eval bypasses JavaScript compile-time checks
- eval can lead to security vulnerabilities
- eval makes code harder to maintain

## Testing Patterns

### Component Testing

```typescript
// features/[feature]/__tests__/component.test.tsx
describe('Component', () => {
  it('renders successfully', () => {
    render(<Component />)

    expect(screen.getByRole('button')).toBeInTheDocument()
  })

  it('handles user interaction', async () => {
    render(<Component />)

    await userEvent.click(screen.getByRole('button'))

    expect(screen.getByText('Success')).toBeInTheDocument()
  })
})
```

## Documentation Standards

### Component Documentation

````typescript
// features/[feature]/components/component.tsx
/**
 * @component ComponentName
 * @description Brief description of the component's purpose
 *
 * @example
 * ```tsx
 * <ComponentName
 *   prop1="value"
 *   prop2={123}
 * />
 * ```
 */
````

## Git Workflow

### Commit Message Format

```
type(scope): subject

body

footer
```

Types:

- feat: New feature
- fix: Bug fix
- docs: Documentation changes
- style: Code style changes
- refactor: Code refactoring
- test: Adding tests
- chore: Maintenance tasks

## Deployment Checklist

1. Run all tests
2. Check accessibility compliance
3. Verify performance metrics
4. Review security measures
5. Validate database migrations
6. Check error monitoring setup
7. Review API documentation
8. Verify environment variables

### Standard Verbs

Always map operations to these fundamental CRUD verbs:

- create
- read/get/fetch
- update
- delete

Examples of mapping "special" operations to standard verbs:

```typescript
// Instead of publishAction:
export async function statusUpdateAction(
  id: string,
  status: "published" | "draft"
) {}

// Instead of archiveAction:
export async function statusUpdateAction(
  id: string,
  status: "archived" | "active"
) {}

// Instead of approveAction:
export async function statusUpdateAction(
  id: string,
  status: "approved" | "pending"
) {}
```

❌ Avoid creating "special" verbs:

```typescript
export async function publishAction() // Don't do this
export async function approveAction() // Don't do this
```

✅ Always map to CRUD:

```typescript
export async function statusUpdateAction() // Do this instead
```

## Database Access Patterns

### Use Supabase Instead of Prisma

Always use Supabase queries instead of Prisma to leverage Row Level Security (RLS):

❌ Avoid Prisma queries:

```typescript
// Don't do this
const space = await prisma.space.findFirst({
  where: { id: spaceId },
})
```

✅ Use Supabase queries instead:

```typescript
// Do this
const { data: space } = await supabase
  .from("Space")
  .select()
  .match({ id: spaceId })
  .single()
```

Key benefits of using Supabase:

- Built-in Row Level Security (RLS)
- Automatic policy enforcement
- Better security at the database level
- Consistent access control

Example of refactoring from Prisma to Supabase:

```typescript
// Before (Prisma)
const domains = await prisma.domain.findMany({
  where: { space_id: spaceId },
  orderBy: { name: "asc" },
  include: { pages: true },
})

// After (Supabase)
const { data: domains } = await supabase
  .from("Domain")
  .select(
    `
    *,
    pages:Page(*)
  `
  )
  .match({ space_id: spaceId })
  .order("name")
```

For reference, I can see this pattern needs to be applied in several places in the codebase:

```typescript:features/space/actions.ts
startLine: 67
endLine: 72
```

```typescript:features/domains/actions.ts
startLine: 10
endLine: 15
```

```typescript:features/membership/actions.ts
startLine: 9
endLine: 15
```

These should all be refactored to use Supabase queries to properly leverage RLS policies.

## Form Submit Buttons

### Never Disable Submit Buttons

❌ Don't disable submit buttons:

```typescript
<Button type="submit" disabled={isPending || !form.isValid}>
  Submit
</Button>
```

✅ Always keep submit buttons enabled:

```typescript
<Button type="submit">
  {isPending ? "Submitting..." : "Submit"}
</Button>
```

Rationale:

- Disabling submit buttons hides form validation errors from users
- Users should be able to attempt submission and see validation feedback
- Let the form's validation handle invalid states
- Show loading states through button text/spinner instead
- Better accessibility as screen readers can interact with the button
- More consistent user experience across the application

### Form Validation Feedback

Instead of preventing submission:

1. Let users submit the form
2. Show validation errors inline
3. Use aria-live regions for error announcements
4. Provide clear feedback on what needs to be fixed
5. Maintain interactive state for better UX

## Learning From Failures

### Document Common Mistakes

Keep track of mistakes and their solutions to maintain consistency and prevent repetition:

❌ Common Mistakes to Avoid:

```typescript
// 1. Never disable submit buttons
<Button type="submit" disabled={isPending}>  // Don't do this

// 2. Never use client-side redirects in server components
redirect('/some-path')  // Don't do this in server components

// 3. Never use Prisma directly (use Supabase)
const user = await prisma.user.findFirst()  // Don't do this

// 4. Never handle forms without proper validation
<form onSubmit={handleSubmit}>  // Don't do this without validation
  <input />
</form>

// 5. Never define Zod schemas outside component scope if they need props
const schema = z.object({  // Don't do this
  name: z.string().refine(value => value === page.name)  // page is undefined!
})

// 6. Never use getSession() for client-side auth checks
const { data: { session } } = await supabase.auth.getSession() // Don't do this
if (!session) {
  throw new Error("Please sign in")
}
```

✅ Correct Patterns:

```typescript
// 1. Keep submit buttons enabled with loading state
<Button type="submit">
  {isPending ? "Submitting..." : "Submit"}
</Button>

// 2. Use server actions for redirects
export async function deleteAction() {
  // ... delete logic
  revalidatePath()
  redirect()
}

// 3. Use Supabase with RLS
const { data: user } = await supabase
  .from("User")
  .select()
  .single()

// 4. Always use form validation
const form = useForm({
  resolver: zodResolver(schema)
})

// 5. Define dynamic schemas inside component scope
function Component({ page }) {
  const schema = z.object({
    name: z.string().refine(value => value === page.name)  // page is in scope
  })
}

// 6. Use getUser() for client-side auth checks
const { data: { user }, error: userError } = await supabase.auth.getUser()
if (userError || !user) {
  throw new Error("Please sign in")
}

// For real-time auth state changes, use onAuthStateChange
useEffect(() => {
  const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
    // Handle auth state changes
  })
  return () => subscription.unsubscribe()
}, [])
```

### Maintaining a Knowledge Base

1. Document each encountered issue
2. Add the solution to the codebase guidelines
3. Share learnings with the team
4. Update component patterns
5. Review and refactor similar instances

### Error Prevention Checklist

Before implementing new features:

1. Check for similar patterns in the codebase
2. Review documented mistakes
3. Follow established solutions
4. Use type-safe alternatives
5. Add new learnings to documentation

## Code Cleanliness

### Dead Code Removal

- Remove unused types, interfaces, and imports
- Delete commented-out code that's been replaced
- Remove unused functions and variables
- Clean up unused CSS classes
- Remove unused props from components

Examples of dead code to remove:

## Authentication Guidelines

### Use Native Supabase Auth

❌ Never use @supabase/auth-helpers-nextjs:

```typescript
// Don't do this
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs"

const supabase = createClientComponentClient()
```

✅ Use native Supabase auth instead:

```typescript
// Do this
import { createClient } from "@supabase/supabase-js"

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)
```

## Icon Usage Guidelines

### Use Lucide Icons

❌ Never use Heroicons:

```typescript
// Don't do this
import { LockClosedIcon } from "@heroicons/react/24/outline"
```

✅ Use Lucide icons instead:

```typescript
// Do this
import { Lock } from "lucide-react"
```

Rationale:

- Consistent icon design system
- Better TypeScript support
- Smaller bundle size
- More frequent updates
- Better accessibility defaults

## Icon Accessibility

### Always Hide Decorative Icons

❌ Avoid exposing icons to screen readers:

```typescript
// Don't do this
<button onClick={onClose}>
  <Icon />
  Close menu
</button>

// Don't do this - icon will be announced by screen readers
<MenuIcon className="w-4 h-4" />
```

✅ Use aria-hidden="true" for icons:

```typescript
// Do this
<button onClick={onClose}>
  <Icon aria-hidden="true" />
  Close menu
</button>

// Do this for standalone icons that have accessible labels
<button aria-labelledby="menu-label">
  <MenuIcon aria-hidden="true" className="w-4 h-4" />
  <span id="menu-label" className="sr-only">Open menu</span>
</button>
```

Rationale:

- Icons are typically decorative and shouldn't be announced by screen readers
- Prevents duplicate or confusing announcements when icons accompany text
- Improves the screen reader experience by reducing noise
- Ensures focus on meaningful content
- Follows WCAG best practices for decorative elements

Common icon usage patterns:

```typescript
// With text
<button className="flex items-center gap-2">
  <StarIcon aria-hidden="true" className="w-4 h-4" />
  Add to favorites
</button>

// Standalone with label
<button aria-labelledby="search-label">
  <SearchIcon aria-hidden="true" className="w-4 h-4" />
  <span id="search-label" className="sr-only">Search</span>
</button>

// In links that open in new window
<a
  href={href}
  target="_blank"
  rel="noopener noreferrer"
  aria-labelledby={`${id}-link-label`}
>
  {children}
  <span id={`${id}-link-label`} className="sr-only">
    {children} (opens in new window)
  </span>
  <ExternalLink aria-hidden="true" className="w-4 h-4" />
</a>
```

## Blog Listing Patterns

### Article List Structure

❌ Avoid over-complicating with unnecessary ARIA:

```typescript
// Don't do this
<section aria-labelledby="blog-list-title">
  <h2 id="blog-list-title" className="sr-only">Blog posts</h2>
  <ul>
    <li>
      <article role="region" aria-label="Blog post">  // Don't elevate to region
        <Link aria-labelledby="post-title post-date"> // Unnecessary aria
          <span id="post-title">{title}</span>
          <time id="post-date">{date}</time>
        </Link>
      </article>
    </li>
  </ul>
</section>
```

✅ Use semantic HTML with proper heading structure:

```typescript
<main>
  <ul>
    <li>
      <article> // Simple semantic grouping
        <Link href={`/blog/${slug}`}>
          <time dateTime={date}>{formattedDate}</time>
          <h2>{title}</h2> // Navigable via headings menu
        </Link>
      </article>
    </li>
  </ul>
</main>
```

Rationale:

- Articles should not be elevated to landmarks/regions unless they are primary content areas
- Use native heading elements (h2) instead of ARIA labeling for navigation
- Keep landmark menu clean and focused on major page sections
- Rely on semantic HTML over ARIA when possible
- Allow navigation via:
  1. Headings menu (h2 titles)
  2. List structure
  3. Main landmark

### Blog Post Navigation

Key navigation patterns to support:

1. Keyboard navigation through list items
2. Screen reader list announcement
3. Heading-based navigation to individual posts
4. Single main landmark containing all posts

Example with proper focus management:

```typescript
<main>
  <ul className="space-y-4">
    {posts.map((post) => (
      <li key={post.slug}>
        <article>
          <Link
            href={`/blog/${post.slug}`}
            className={cn(
              "grid grid-cols-4 p-2 rounded-md",
              "transition-colors duration-200",
              "hover:bg-muted hover:shadow-sm",
              "focus-visible:outline-none focus-visible:ring-2",
              "focus-visible:ring-ring focus-visible:ring-offset-2",
              "focus-visible:bg-muted focus-visible:shadow-sm"
            )}
          >
            <time dateTime={post.date} className="...">
              {formatDate(post.date)}
            </time>
            <div className="col-span-12 md:col-span-3">
              <h2 className="text-base font-normal">
                {post.title}
              </h2>
            </div>
          </Link>
        </article>
      </li>
    ))}
  </ul>
</main>
```

Benefits:

- Clean document outline
- Efficient navigation for screen reader users
- Proper semantic structure
- Minimal ARIA usage
- Clear visual and keyboard focus indicators
